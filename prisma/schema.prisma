generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Status {
  SETUP
  INITIAL
  NORMAL
  FREEZE
  FINAL
}

model Game {
  id String @id

  finalBlock  Int    @map("final_block")
  firstBlock  Int?   @map("first_block")
  initialPool BigInt @map("initial_pool")
  minBet      BigInt @map("min_bet")
  ticketPrice BigInt @map("ticket_price")

  currentBlock       Int    @map("current_block")
  currentPool        BigInt @map("current_pool")
  currentRoundNumber Int    @map("current_round_number")
  freezeDuration     Int?   @map("freeze_duration")
  nextFreeze         Int?   @map("next_freeze")
  nextMassacre       Int?   @map("next_massacre")
  roundLength        Int?   @map("round_length")
  status             Status
  poolPubKey         String @map("pool_pub_key")

  currentRound Round    @relation(fields: [id, currentRoundNumber], references: [gameId, number])
  players      Player[] @relation
  rounds       Round[]  @relation("gameRounds")
  tickets      Ticket[] @relation

  @@map("game")
}

model Round {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gameId String @map("game_id")
  number Int

  game         Game          @relation("gameRounds", fields: [gameId], references: [id])
  deadPlayers  Player[]      @relation("deadPlayers")
  roundPlayers RoundPlayer[] @relation
  Game         Game[]

  @@unique([gameId, number])
  @@map("round")
}

model Player {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gameId String @map("game_id")
  walias String

  deathRoundId   String? @map("death_round_id") @db.Uuid
  maxZap         BigInt  @default(0) @map("max_zap")
  power          BigInt  @default(0)
  ticketId       String  @unique @map("ticket_id") @db.Uuid
  zapped         BigInt  @default(0) @map("total_zapped")
  zapCount       Int     @default(0) @map("zap_count")
  onchainAddress String? @map("onchain_address")

  deathRound   Round?        @relation("deadPlayers", fields: [deathRoundId], references: [id])
  game         Game          @relation(fields: [gameId], references: [id])
  ticket       Ticket        @relation(fields: [ticketId], references: [id])
  roundPlayers RoundPlayer[] @relation

  @@unique([gameId, walias])
  @@map("player")
}

model RoundPlayer {
  roundId  String @map("round_id") @db.Uuid
  playerId String @map("player_id") @db.Uuid

  maxZap   BigInt @default(0) @map("max_zap")
  zapped   BigInt @default(0)
  zapCount Int    @default(0) @map("zap_count")

  player      Player              @relation(fields: [playerId], references: [id])
  round       Round               @relation(fields: [roundId], references: [id])
  zapReceipts ZapReceipt[]        @relation
  txOutputs   TransactionOutput[]

  @@id([playerId, roundId])
  @@map("round_player")
}

model Ticket {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  gameId       String  @map("game_id")
  walias       String
  zapReceiptId String? @unique

  game       Game        @relation(fields: [gameId], references: [id])
  player     Player?     @relation
  zapReceipt ZapReceipt? @relation(fields: [zapReceiptId], references: [id])

  @@unique([gameId, walias])
  @@map("ticket")
}

model ZapReceipt {
  id String @id

  event      String
  roundId    String  @db.Uuid
  playerId   String  @db.Uuid
  isAnswered Boolean @default(false)

  roundPlayer RoundPlayer @relation(fields: [roundId, playerId], references: [roundId, playerId])
  ticket      Ticket?     @relation
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model TransactionOutput {
  txId        String @map("tx_id")
  outputIndex Int    @map("output_index")

  roundId    String?           @map("round_id") @db.Uuid
  playerId   String?           @map("player_id") @db.Uuid
  isAnswered Boolean           @default(false) @map("is_answered")
  status     TransactionStatus @default(PENDING)

  roundPlayer RoundPlayer? @relation(fields: [roundId, playerId], references: [roundId, playerId])

  @@unique([txId, outputIndex])
  @@map("transaction_output")
}
