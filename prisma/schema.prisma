generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Status {
  SETUP
  INITIAL
  NORMAL
  FREEZE
  FINAL
}

model Game {
  id String @id

  finalBlock  Int    @map("final_block")
  firstBlock  Int    @map("first_block")
  initialPool BigInt @map("initial_pool")
  minBet      BigInt @map("min_bet")
  ticketPrice BigInt @map("ticket_price")

  currentBlock       Int    @map("current_block")
  currentPool        BigInt @map("current_pool")
  currentRoundNumber Int    @map("current_round_number")
  freezeDuration     Int    @map("freeze_duration")
  nextFreeze         Int    @map("next_freeze")
  nextMassacre       Int    @map("next_massacre")
  roundLength        Int    @map("round_length")
  status             Status

  currentRound Round    @relation(fields: [id, currentRoundNumber], references: [gameId, number])
  players      Player[] @relation
  rounds       Round[]  @relation("gameRounds")
  tickets      Ticket[] @relation
}

model Round {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gameId String @map("game_id")
  number Int

  game         Game          @relation("gameRounds", fields: [gameId], references: [id])
  deadPlayers  Player[]      @relation("deadPlayers")
  roundPlayers RoundPlayer[] @relation
  Game         Game[]

  @@unique([gameId, number])
}

model Player {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gameId String @map("game_id")
  lud16  String

  amount       BigInt  @default(0)
  deathRoundId String? @map("death_round_id")
  maxZap       BigInt  @default(0) @map("max_zap")
  ticketId     String  @unique @map("ticket_id")
  totalZapped  BigInt  @default(0) @map("total_zapped")
  zapCount     Int     @default(0) @map("zap_count")

  deathRound   Round?        @relation("deadPlayers", fields: [deathRoundId], references: [id])
  game         Game          @relation(fields: [gameId], references: [id])
  ticket       Ticket        @relation(fields: [ticketId], references: [id])
  roundPlayers RoundPlayer[] @relation

  @@unique([gameId, lud16])
}

model RoundPlayer {
  roundId  String @map("round_id")
  playerId String @map("player_id")

  maxZap   BigInt @default(0) @map("max_zap")
  zapped   BigInt @default(0)
  zapCount BigInt @default(0) @map("zap_count")

  player Player @relation(fields: [playerId], references: [id])
  round  Round  @relation(fields: [roundId], references: [id])

  @@id([playerId, roundId])
}

model Ticket {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  gameId String @map("game_id")
  lud16  String

  game   Game    @relation(fields: [gameId], references: [id])
  player Player? @relation

  @@unique([gameId, lud16])
}
